// docx/.vuepress/config.js
import { defineUserConfig } from "vuepress";
import { defaultTheme } from "@vuepress/theme-default";
import { path as path3 } from "@vuepress/utils";

// docx/.vuepress/plugins/vuepress-plugin.js
import { getDirname, path, logger } from "@vuepress/utils";
import { searchPlugin } from "@vuepress/plugin-search";
import { containerPlugin } from "@vuepress/plugin-container";
import { registerComponentsPlugin } from "@vuepress/plugin-register-components";

// docx/.vuepress/plugins/markdown-it-mermaid.ts
import Mermaid from "mermaid";

// docx/.vuepress/plugins/murmurhash3_32_gc.ts
function murmurhash3_32_gc(str, seed) {
  var key, remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;
  key = new TextEncoder().encode(str);
  remainder = key.length & 3;
  bytes = key.length - remainder;
  h1 = seed;
  c1 = 3432918353;
  c2 = 461845907;
  i = 0;
  while (i < bytes) {
    k1 = key[i] & 255 | (key[++i] & 255) << 8 | (key[++i] & 255) << 16 | (key[++i] & 255) << 24;
    ++i;
    k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
    k1 = k1 << 15 | k1 >>> 17;
    k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
    h1 ^= k1;
    h1 = h1 << 13 | h1 >>> 19;
    h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
    h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
  }
  k1 = 0;
  switch (remainder) {
    case 3:
      k1 ^= (key[i + 2] & 255) << 16;
    case 2:
      k1 ^= (key[i + 1] & 255) << 8;
    case 1:
      k1 ^= key[i] & 255;
      k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
      k1 = k1 << 15 | k1 >>> 17;
      k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
      h1 ^= k1;
  }
  h1 ^= key.length;
  h1 ^= h1 >>> 16;
  h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
  h1 ^= h1 >>> 13;
  h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
  h1 ^= h1 >>> 16;
  return h1 >>> 0;
}
var murmurhash3_32_gc_default = murmurhash3_32_gc;

// docx/.vuepress/plugins/markdown-it-mermaid.ts
var htmlEntities = (str) => String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
var MermaidChart = (code) => {
  try {
    var needsUniqueId = "r-" + murmurhash3_32_gc_default(code, 42).toString();
    console.log("id", needsUniqueId, code);
    return `<div class="mermaid"><pre>${code}</pre></div>`;
  } catch (err) {
    return `<pre>${htmlEntities(err.name)}: ${htmlEntities(err.message)}</pre>`;
  }
};
var MermaidPlugIn = (md, opts) => {
  Object.assign(MermaidPlugIn.default, opts);
  const { token: _token = "mermaid", ...dictionary } = MermaidPlugIn.default.dictionary;
  Mermaid.initialize(MermaidPlugIn.default);
  function replacer(_, p1, p2, p3) {
    p1 = dictionary[p1] ?? p1;
    p2 = dictionary[p2] ?? p2;
    return p2 === "" ? `${p1}
` : `${p1} ${p2}${p3}`;
  }
  const defaultRenderer = md.renderer.rules.fence.bind(md.renderer.rules);
  md.renderer.rules.fence = (tokens, idx, opts2, env, self) => {
    const token = tokens[idx];
    const code = token.content.trim();
    if (token.info.trim() === _token) {
      return MermaidChart(code.replace(/(.*?)[ \n](.*?)([ \n])/, replacer));
    }
    return defaultRenderer(tokens, idx, opts2, env, self);
  };
};
MermaidPlugIn.default = {
  startOnLoad: false,
  securityLevel: "true",
  theme: "default",
  flowchart: {
    htmlLabels: false,
    useMaxWidth: true
  },
  dictionary: {
    token: "mermaid"
  }
};

// docx/.vuepress/plugins/vuepress-plugin.js
var __vite_injected_original_import_meta_url = "file:///F:/github/vuepress-website/docx/.vuepress/plugins/vuepress-plugin.js";
var __dirname2 = getDirname(__vite_injected_original_import_meta_url);
var __workdir = path.resolve(__dirname2, "./../../../src");
logger.info("src", __workdir);
var vuepress_plugin_default = [
  //TODO: 页面渲染流程图组件未适配成功
  // mermaidPlugin({
  //     name: "图表参数配置",
  // }),
  // 使用本地简易搜索
  searchPlugin({
    locales: {
      "/": {
        placeholder: "Search"
      },
      "/guide/": {
        placeholder: "\u8F93\u5165\u5173\u952E\u5B57"
      },
      "/poetry/": {
        placeholder: "\u8F93\u5165\u53E4\u8BD7\u8BCD\u540D"
      }
    },
    isSearchable: (page) => page.path !== "/",
    maxSuggestions: 7,
    getExtraFields: (page) => page.frontmatter.tags ?? []
  }),
  registerComponentsPlugin({
    componentsDir: path.resolve(__dirname2, "./../components")
  }),
  //此功能弃用，@/plugins/client.ts
  // registerComponentsPlugin({
  //     // 把这个目录/子目录下的所有组件注册成全局组件
  //     componentsDir: path.resolve(__workdir, "./components"),
  //     componentsPatterns: ["**/*.vue"],
  //     getComponentName: (fileName) => {
  //         // const name = path.trimExt(fileName.replace(/\/|\\/g, "-"));
  //         const list = fileName.split("/");
  //         // console.log('\n----', path.trimExt(list[list.length - 1]));
  //         return path.trimExt(list[list.length - 1]);
  //     },
  // }),
  containerPlugin({
    type: "tip",
    locales: {
      "/": { defaultInfo: "TIPS" },
      "/guide": { defaultInfo: "\u63D0\u793A" }
    },
    before: (info) => `<div class="tip-block tip"><p class="title">${info}</p>`,
    after: () => "</div>\n"
  }),
  containerPlugin({
    type: "success",
    locales: {
      "/": { defaultInfo: "SUCCESS" },
      "/guide": { defaultInfo: "\u6210\u529F" }
    },
    before: (info) => `<div class="tip-block success"><p class="title">${info}</p>`,
    after: () => "</div>\n"
  }),
  containerPlugin({
    type: "warning",
    locales: {
      "/": { defaultInfo: "WARNING" },
      "/guide": { defaultInfo: "\u8B66\u544A" }
    },
    before: (info) => `<div class="tip-block warning"><p class="title">${info}</p>`,
    after: () => "</div>\n"
  }),
  containerPlugin({
    type: "danger",
    locales: {
      "/": { defaultInfo: "ERROR" },
      "/guide": { defaultInfo: "\u9519\u8BEF" }
    },
    before: (info) => `<div class="tip-block danger"><p class="title">${info}</p>`,
    after: () => "</div>\n"
  }),
  containerPlugin({
    type: "details",
    before: (info) => `<details class="tip-block details"><summary>${info}</summary>`,
    after: () => "</details>\n"
  })
];

// docx/.vuepress/plugins/vuepress-markdown.js
import { path as path2, logger as logger2 } from "@vuepress/utils";
var __vite_injected_original_dirname = "F:/github/vuepress-website/docx/.vuepress/plugins";
var src = path2.resolve(__vite_injected_original_dirname, "./../../../src/");
var vuepress_markdown_default = {
  headers: {
    level: [2, 3, 4]
  },
  toc: {
    level: [2, 3, 4, 5],
    pattern: /\@\[toc\]|\[\[toc\]\]/i
    //匹配[[toc]]或@[toc]
  },
  code: {
    lineNumbers: 6
    //显示行号
  },
  // extractHeaders: {
  //     level: ['h1', 'h2', 'h3', 'h4'] //提取出来缓存的标题
  // },
  importCode: {
    //导入代码块
    handleImportPath: (str) => str.replace(/^@src/, src)
  }
};

// docx/.vuepress/config/locales.js
var locales_default = {
  "/guide/": {
    lang: "guide",
    title: "\u5B66\u4E60\u6307\u5357",
    description: "captives.github.io"
  }
  // '/poetry/': {
  //     lang: 'poetry',
  //     title: '古诗词',
  //     description: 'captives.github.io',
  // }
};

// docx/.vuepress/config/navbar.js
var navbar_default = [{
  text: "\u5E2E\u52A9",
  children: [
    { text: "markdown\u8BED\u6CD5", link: "/markdown" },
    { text: "markdown\u8BED\u6CD5", link: "/markdown" },
    { text: "markdown\u8BED\u6CD5", link: "/markdown" }
  ]
}];

// docx/.vuepress/theme/index.ts
var theme_default = {
  logo: "assets/images/logo.svg",
  repo: "captives/vuepress-website",
  repoLabel: "Captives",
  docsDir: "docx",
  // 启用页面滚动
  smoothScroll: true,
  backToHome: "\u8FD4\u56DECaptives",
  editLinkPattern: ":repo/edit/develop/:path",
  locales: {
    "/": {
      // navbar: true,
      sidebar: false,
      editLink: false,
      selectLanguageText: "Captives",
      selectLanguageName: "Captives"
    },
    "/guide/": {
      navbar: navbar_default,
      editLink: true,
      // sidebar: guideSidebar,
      selectLanguageText: "\u5B66\u4E60\u6307\u5357",
      selectLanguageName: "\u5B66\u4E60\u6307\u5357"
    }
    // '/poetry/': {
    //     navbar,
    //     selectLanguageText: "中华古诗词",
    //     selectLanguageName: "中华古诗词"
    // }
  }
};

// docx/.vuepress/config.js
var __vite_injected_original_dirname2 = "F:/github/vuepress-website/docx/.vuepress";
var config_default = defineUserConfig({
  lang: "/",
  title: "\u4F60\u597D\uFF0C VuePress \uFF01",
  description: "\u8FD9\u662F\u6211\u7684\u7B2C\u4E00\u4E2A VuePress \u7AD9\u70B9",
  base: "/vuepress-website/",
  dest: path3.resolve(__vite_injected_original_dirname2, "./../../docs"),
  port: 2023,
  alias: {
    "@": path3.resolve(__vite_injected_original_dirname2, "./../../src"),
    "@/assets": path3.resolve(__vite_injected_original_dirname2, "./../../src/assets"),
    "@/views": path3.resolve(__vite_injected_original_dirname2, "./../../src/views"),
    "@/pages": path3.resolve(__vite_injected_original_dirname2, "./../../src/pages")
  },
  define: {
    VITE_APP_BASE_API: "http://localhost:2010",
    VITE_APP_GITHUB_API: "https://captives.github.io/api"
  },
  debug: true,
  theme: defaultTheme(theme_default),
  locales: locales_default,
  plugins: vuepress_plugin_default,
  markdown: vuepress_markdown_default
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
