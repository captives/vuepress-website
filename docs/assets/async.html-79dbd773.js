import { r as resolveComponent, o as openBlock, a as createElementBlock, b as createBaseVNode, f as createVNode, g as withCtx, e as createTextVNode, j as createStaticVNode } from "./app-e6eab0de.js";
import { _ as _export_sfc } from "./framework-cc2b3d55.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h1",
  {
    id: "async",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#async",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" async")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createBaseVNode(
  "blockquote",
  null,
  [
    /* @__PURE__ */ createBaseVNode("p", null, "异步编程是指由于异步I/O等因素，无法同步获得执行结果时，在回调函数中进行下一步操作的代码编写风格,常见的如setTimeout函数、ajax请求等等。")
  ],
  -1
  /* HOISTED */
);
const _hoisted_3 = { class: "tip-block details" };
const _hoisted_4 = /* @__PURE__ */ createBaseVNode(
  "summary",
  null,
  "目录导航",
  -1
  /* HOISTED */
);
const _hoisted_5 = { class: "table-of-contents" };
const _hoisted_6 = /* @__PURE__ */ createStaticVNode('<h3 id="内容" tabindex="-1"><a class="header-anchor" href="#内容" aria-hidden="true">#</a> 内容</h3><ul><li>流程控制： 简化九种常见的流程的处理</li><li>集合处理：如何使用异步操作处理集中的数据</li><li>工具类：几个常用的工具类</li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> async –-save\n</code></pre></div><h3 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h3><h4 id="series-串行执行" tabindex="-1"><a class="header-anchor" href="#series-串行执行" aria-hidden="true">#</a> series 串行执行</h4><ul><li>series(tasks |Array | Object, callback)</li></ul><p>多个函数依次执行，之间没有数据交换。仅仅需要保证其顺序执行,中间发生错误，后续不执行，直接报告结果。 tasks可以是一个数组也可以是一个JSON对象，参数类型不同，影响的是返回数据的格式。</p><blockquote><p>注： 多个series调用之间是不分先后的，因为series本身也是异步调用。</p></blockquote><p>示例1：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">one</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">two</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nasync<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;series&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 1 end 1 start 2 end 2 series null { one: 1, two: 2 }</p></details><p>示例2：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">one</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&#39;异常&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">two</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nasync<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;series&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>series 异常 { one: 1 }</p></details><h4 id="waterfall-串行传参" tabindex="-1"><a class="header-anchor" href="#waterfall-串行传参" aria-hidden="true">#</a> waterfall 串行传参</h4><ul><li>waterfall(tasks|Array, callback)</li></ul><p>多个函数依次执行，函数间可传值。</p><p>可以解决callback嵌套的问题。上一个流程的执行结果，会传给下一个流程的参数。如果其中一个流程出错，则会中止后续流程的执行，直接调用最终的callback。否则最后一个流程的结果，会传递给最终callback。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">waterfall</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;waterfall&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>1 2 one two 3 three waterfall null done</p></details><h4 id="parallel-并行执行" tabindex="-1"><a class="header-anchor" href="#parallel-并行执行" aria-hidden="true">#</a> parallel 并行执行</h4><ul><li>parallel(tasks|Array|Object, callback)</li></ul><p>多个函数并行执行，每个函数都是立刻执行，不需要等待其他函数先执行。传给最终callback的数组中的数据按照tasks声明的顺序，而不是执行完成的顺序。 如果某个函数出错，则立刻将err和已经执行完的函数的结果值传给parallel最终的callback。其它为执行完的函数的值不会传到最终数据，但要占个位置。</p><blockquote><p>同时支持json形式的tasks，其最终callback的结果也为json形式。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">one</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">two</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;parallel&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 1 start 2 end 2 end 1 parallel null { two: 2, one: 1 }</p></details><h4 id="whilst-循环" tabindex="-1"><a class="header-anchor" href="#whilst-循环" aria-hidden="true">#</a> whilst 循环</h4><ul><li>whilst(test, iterator, callback)</li></ul><p>相当于while，先判断的循环,test为true, 执行iterator; 重复执行一个函数。当test函数为true时，重复调用iterator。直到test函数为false或者iterator函数有错误产生时候，调用最后的callback</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">whilst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    count<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;whilst&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 6 end 5 start 5 end 4 start 4 end 3 start 3 end 2 start 2 end 1 whilst null 1</p></details><h4 id="dowhilst-循环" tabindex="-1"><a class="header-anchor" href="#dowhilst-循环" aria-hidden="true">#</a> doWhilst 循环</h4><ul><li>doWhilst(iterator, test, callback)</li></ul><p>相当于do…while，后判断的循环,先执行iterator，然后判断test，如果为true,则继续执行;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">doWhilst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    count<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doWhilst&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 6 end 5 start 5 end 4 start 4 end 3 start 3 end 2 start 2 end 1 doWhilst null 1</p></details><h4 id="until" tabindex="-1"><a class="header-anchor" href="#until" aria-hidden="true">#</a> until</h4><ul><li>until(test, iterator, callback)</li></ul><p>无限循环函数，当test返回false, 执行iterator;test返回true, 则停止循环。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    count<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;until&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 6 end 5 start 5 end 4 start 4 end 3 start 3 end 2 until null 2</p></details><h4 id="dountil" tabindex="-1"><a class="header-anchor" href="#dountil" aria-hidden="true">#</a> doUntil</h4><ul><li>doUntil(iterator, test, callback)</li></ul><p>相当于do…while，后判断的循环,先执行iterator，然后判断test，如果为false,继续执行;如果为true则停止。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">doUntil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    count<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doWhilst&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 6 end 5 doWhilst null 5</p></details><h4 id="during" tabindex="-1"><a class="header-anchor" href="#during" aria-hidden="true">#</a> during</h4><ul><li>during(test, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">during</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        count<span class="token operator">--</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;during&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 6 change 5 start 5 change 4 start 4 change 3 start 3 change 2 start 2 change 1 start 1 during null</p></details><h4 id="doduring" tabindex="-1"><a class="header-anchor" href="#doduring" aria-hidden="true">#</a> doDuring</h4><ul><li>doDuring(iterator, test, callback)</li></ul><p>过程中的后检查版本。为了反映操作顺序的差异，是一个具有异步测试功能的doWhilst版本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">doDuring</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    count<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// return callback(&#39;异常&#39;, args &gt; 3);</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doDuring&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 6 end 5 start 5 end 4 start 4 end 3 doDuring null auto auto(test, iterator, callback)</p></details><h4 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> auto</h4><ul><li>auto(tasks|Array|Object, [callback])</li></ul><p>多个函数有依赖关系， 有的并行执行，有的一次执行</p><ul><li>until</li><li>queue</li><li>iterator</li><li>nextTick</li></ul><h3 id="collections集合" tabindex="-1"><a class="header-anchor" href="#collections集合" aria-hidden="true">#</a> Collections集合</h3><h4 id="each" tabindex="-1"><a class="header-anchor" href="#each" aria-hidden="true">#</a> each</h4><ul><li>each(arr, iterator, callback)</li></ul><details class="tip-block details"><summary>参数：</summary><ul><li>arr 想要循环的数组</li><li>iterator(item, callback) 一个回调函数，循环到的每一项都会调用这个函数。</li><li><ul><li>item 数组中的每一项。callback(err) 当完成的时候调用，应该不带参数执行，或者明确指定一个 null</li></ul></li><li>callback(err) 一个回调函数，用于循环完成后 或 发生错误时调用</li></ul></details><p>并行遍历集合元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data  <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">6.8</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Litchi&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Orange&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nasync<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange Error null</p></details><p>遍历过程有异常时通过callback返回，进程不会中断，直到全部遍历完成后err在最后的回调函数返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&#39;这是&#39;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;each&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>arr [ 1, 2, 3, 2, 4, 5 ] item 1 item 2 item 3 each 这是3 item 2 item 4 item 5</p></details><h4 id="eachlimit" tabindex="-1"><a class="header-anchor" href="#eachlimit" aria-hidden="true">#</a> eachLimit</h4><ul><li>eachLimit(arr, limit, iterator, callback)</li></ul><p>limit 限制并行的最大数量 批量遍历集合元素，同一时候限制执行limit个任务。 单个任务执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">eachLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;eachLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi end Apple start Orange end Litchi end Orange eachLimit null</p></details><p>多个任务执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">eachLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;eachLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange eachLimit null</p></details><p>遍历过程有异常通过cb返回，进程不会中断，直到全部遍历完成后err在最后的回调函数返回。</p><h4 id="eachseries" tabindex="-1"><a class="header-anchor" href="#eachseries" aria-hidden="true">#</a> eachSeries</h4><ul><li>eachSeries(arr, iterator, callback)</li></ul><details class="tip-block details"><summary>参数:</summary><ul><li>arr 想要循环的数组</li><li>iterator(item, callback) 一个回调函数，循环到的每一项都会调用这个函数。</li><li><ul><li>item 数组中的每一项。</li></ul></li><li><ul><li>callback(err) 当完成的时候调用，应该不带参数执行，或者明确指定一个 null</li></ul></li><li>callback(err) 一个回调函数，用于循环完成后 或 发生错误时调用</li></ul></details><p>顺序遍历集合元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">eachSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange Error null</p></details><p>一个元素遍历完成及后续的操作完成后，才会进入下一个元素遍历。遍历过程出现err中断循环并在最后的回调函数返回err。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">eachSeries</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&#39;这是&#39;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;eachSeries&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>arr [ 1, 2, 3, 2, 4, 5 ] item 1 item 2 item 3 eachSeries 这是3</p></details><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h4><ul><li>map(arr, iterator, callback)</li></ul><p>并行执行集合中的元素</p><details class="tip-block details"><summary>参数：</summary><ul><li>arr 想要循环的数组</li><li>iterator(item, callback) 一个回调函数，循环到得每一项都会调用这个函数</li><li><ul><li>item 数组中的每一项。</li></ul></li><li><ul><li>callback(err, transformed) 当程序执行完时，调用此参数(必须调用此参数)</li></ul></li><li>callback(err, results) 一个回调函数，当所有数组执行完成，或发生错误的时候，被调用。</li></ul></details><p>map 通俗点说，就是通过一个转换函数（iterator），把数组中的每个值映射到一个新的数组中。（产生一个新的数组）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;map&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange map null [ &#39;Apple!&#39;, &#39;Litchi!&#39;, &#39;Orange!&#39; ]</p></details><h4 id="maplimit" tabindex="-1"><a class="header-anchor" href="#maplimit" aria-hidden="true">#</a> mapLimit</h4><ul><li>mapLimit(arr, limit, iterator, callback) limit 限制并行的最大数量 批量执行集合元素，同一时候限制执行limit个任务。 单个任务执行：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mapLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange mapLimit null [ &#39;Apple!&#39;, &#39;Litchi!&#39;, &#39;Orange!&#39; ]</p></details><p>多个任务执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mapLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange mapLimit null [ &#39;Apple!&#39;, &#39;Litchi!&#39;, &#39;Orange!&#39; ]</p></details><h4 id="mapseries" tabindex="-1"><a class="header-anchor" href="#mapseries" aria-hidden="true">#</a> mapSeries</h4><ul><li>mapSeries(arr, iterator, callback)</li></ul><p>顺序执行集合中的元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mapSeries&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange mapSeries null [ &#39;Apple!&#39;, &#39;Litchi!&#39;, &#39;Orange!&#39; ]</p></details><h3 id="mapvalues" tabindex="-1"><a class="header-anchor" href="#mapvalues" aria-hidden="true">#</a> mapValues</h3><ul><li>mapValues(arr, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapValues</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mapValues&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 0 { name: &#39;Apple&#39;, price: 6.8, delay: 200 } start 1 { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } start 2 { name: &#39;Orange&#39;, price: 8.2, delay: 400 } end 0 { name: &#39;Apple&#39;, price: 6.8, delay: 200 } end 1 { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } end 2 { name: &#39;Orange&#39;, price: 8.2, delay: 400 } mapValues null { &#39;0&#39;: &#39;Apple&#39;, &#39;1&#39;: &#39;Litchi&#39;, &#39;2&#39;: &#39;Orange&#39; }</p></details><h4 id="mapvalueslimit" tabindex="-1"><a class="header-anchor" href="#mapvalueslimit" aria-hidden="true">#</a> mapValuesLimit</h4><ul><li>mapValuesLimit(arr, limit, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapValuesLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mapValuesLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 0 { name: &#39;Apple&#39;, price: 6.8, delay: 200 } start 1 { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } end 0 { name: &#39;Apple&#39;, price: 6.8, delay: 200 } start 2 { name: &#39;Orange&#39;, price: 8.2, delay: 400 } end 1 { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } end 2 { name: &#39;Orange&#39;, price: 8.2, delay: 400 } mapValuesLimit null { &#39;0&#39;: &#39;Apple&#39;, &#39;1&#39;: &#39;Litchi&#39;, &#39;2&#39;: &#39;Orange&#39; }</p></details><h4 id="mapvaluesseries" tabindex="-1"><a class="header-anchor" href="#mapvaluesseries" aria-hidden="true">#</a> mapValuesSeries</h4><ul><li>mapValuesSeries(arr, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapValuesSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mapValuesSeries&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start 0 { name: &#39;Apple&#39;, price: 6.8, delay: 200 } end 0 { name: &#39;Apple&#39;, price: 6.8, delay: 200 } start 1 { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } end 1 { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } start 2 { name: &#39;Orange&#39;, price: 8.2, delay: 400 } end 2 { name: &#39;Orange&#39;, price: 8.2, delay: 400 } mapValuesSeries null { &#39;0&#39;: &#39;Apple&#39;, &#39;1&#39;: &#39;Litchi&#39;, &#39;2&#39;: &#39;Orange&#39; }</p></details><h4 id="filter-条件过滤" tabindex="-1"><a class="header-anchor" href="#filter-条件过滤" aria-hidden="true">#</a> filter 条件过滤</h4><ul><li>filter(arr, iterator, callback)</li></ul><p>这个操作是并行的，但返回的结果是顺序的。</p><details class="tip-block details"><summary>参数：</summary><ul><li>arr 一个数组，用于遍历</li><li>iterator(item, callback) 一个函数，用于真值检测</li><li><ul><li>item 数组中的每一项</li></ul></li><li><ul><li>callback(err, truthValue) 完成时调用，必须带一个布尔参数</li></ul></li><li>callback 一个回调函数，用于执行完成后，或发生错误时调用。</li></ul></details><p>过滤array中的元素，iterator中的cb是一个表达式，只有两个结果false和true，结果为true汇总在最后的callback。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;filter&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange filter null [ { name: &#39;Apple&#39;, price: 6.8, delay: 200 },{ name: &#39;Orange&#39;, price: 8.2, delay: 400 } ]</p></details><h4 id="filterlimit条件过滤" tabindex="-1"><a class="header-anchor" href="#filterlimit条件过滤" aria-hidden="true">#</a> filterLimit条件过滤</h4><ul><li>filterLimit (arr, limit, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">filterLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;filter&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi end Apple start Orange end Litchi end Orange filter null [ { name: &#39;Apple&#39;, price: 6.8, delay: 200 }, { name: &#39;Orange&#39;, price: 8.2, delay: 400 } ]</p></details><h4 id="filterseries-条件过滤" tabindex="-1"><a class="header-anchor" href="#filterseries-条件过滤" aria-hidden="true">#</a> filterSeries 条件过滤</h4><ul><li>filterSeries(arr, iterator, callback);</li></ul><p>这个操作是顺序执行的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">filterSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;filterSeries&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange filterSeries null [ { name: &#39;Apple&#39;, price: 6.8, delay: 200 }, { name: &#39;Orange&#39;, price: 8.2, delay: 400 } ]</p></details><h4 id="reject-过滤例外" tabindex="-1"><a class="header-anchor" href="#reject-过滤例外" aria-hidden="true">#</a> reject 过滤例外</h4><ul><li>reject(arr, iterator, callback)</li></ul><p>和filter相反，filter是保留t的表达式为true的item，而reject是表达式值为false的item;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reject&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange reject null [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } ]</p></details><h4 id="rejectlimit" tabindex="-1"><a class="header-anchor" href="#rejectlimit" aria-hidden="true">#</a> rejectLimit</h4><ul><li>rejectLimit (arr, limit, iterator, callback);</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">rejectLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;rejectLimit&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi end Apple start Orange end Litchi end Orange reject null [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } ]</p></details><h4 id="rejectseries" tabindex="-1"><a class="header-anchor" href="#rejectseries" aria-hidden="true">#</a> rejectSeries</h4><ul><li>rejectSeries(arr, iterator, callback);</li></ul><p>这个操作是顺序执行的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">rejectSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;rejectSeries&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange rejectSeries null [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300 } ]</p></details><h4 id="reduce-串行累加" tabindex="-1"><a class="header-anchor" href="#reduce-串行累加" aria-hidden="true">#</a> reduce 串行累加</h4><ul><li>reduce(arr, memo, iterator, callback)</li></ul><p>逐渐累加,只支持 series 模式，不支持并行。 Reduce可以让我们给定一个初始值，用它与集合中的每一个元素做运算（前一次的运算结果与下一个值做运算），最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">+</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reduce&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange reduce null 17.5</p></details><blockquote><p>参看：Array.prototype.reduce</p></blockquote><h4 id="reduceright-元素计算" tabindex="-1"><a class="header-anchor" href="#reduceright-元素计算" aria-hidden="true">#</a> reduceRight 元素计算</h4><ul><li>reduceRight(arr, memo, iterator, callback)</li></ul><p>与 reduce 一样，不同的是，reduceRight 是从右向左计算。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">+</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reduceRight&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Orange end Orange start Litchi end Litchi start Apple end Apple reduceRight null 17.5</p></details><h4 id="detect" tabindex="-1"><a class="header-anchor" href="#detect" aria-hidden="true">#</a> detect</h4><ul><li>detect(arr, iterator, callback)</li></ul><p>用于取得集合中满足条件的第一个元素（并行执行）。</p><details class="tip-block details"><summary>参数：</summary><ul><li>arr 一个数组</li><li>iterator(item, callback) 回调函数，用于处理逻辑（迭代器）</li><li><ul><li>item 数组中的每一项</li></ul></li><li><ul><li>callback(truthValue) 程序完成后执行。必须传入布尔值。</li></ul></li><li>callback(result) 回调函数， iterator 第一次返回 true，或 循环完成后执行。</li></ul></details><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">detect</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;detect&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple detect null { name: &#39;Apple&#39;, price: 6.8, delay: 200 } end Litchi end Orange 参看：Array.prototype.reduceRight</p></details><h4 id="detectlimit" tabindex="-1"><a class="header-anchor" href="#detectlimit" aria-hidden="true">#</a> detectLimit</h4><ul><li>detectLimit(arr, limit, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">detectLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;detectLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi end Apple detectLimit null { name: &#39;Apple&#39;, price: 6.8, delay: 200 } end Litchi</p></details><h4 id="detectseries" tabindex="-1"><a class="header-anchor" href="#detectseries" aria-hidden="true">#</a> detectSeries</h4><ul><li>detectSeries(arr, iterator, callback)</li></ul><p>用于取得集合中满足条件的第一个元素（顺序执行）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">detectSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">||</span> item<span class="token punctuation">.</span>delay <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;detectSeries&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple detectSeries null { name: &#39;Apple&#39;, price: 6.8, delay: 200 }</p></details><h4 id="sortby-排序" tabindex="-1"><a class="header-anchor" href="#sortby-排序" aria-hidden="true">#</a> sortBy 排序</h4><ul><li>sortBy(arr, iterator, callback)</li></ul><details class="tip-block details"><summary>参数：</summary><ul><li>arr 一个数组</li><li>iterator(item, callback) 一个回调函数，循环到得每一项都会执行。</li><li><ul><li>item 数组中的每一项</li></ul></li><li><ul><li>callback(err, sortValue) 完成时调用。sortValue排序字段</li></ul></li><li>callback(err, results) 一个回调函数，所有 iterator 完成后或发生错误时执行。</li></ul></details><p>对集合内的元素进行排序，根据每个元素进行某异步操作后产生的值，从小到大排序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sortBy&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出</p><details class="tip-block details"><summary>控制台输出</summary><p>sortBy null [ 0, 1, 2, 4, 5, 6, 7, 8, 9 ]</p></details><p>例2：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//item.price 排序字段</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sortBy&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><details class="tip-block details"><summary>控制台输出</summary><p>sortBy null [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300 },{ name: &#39;Apple&#39;, price: 6.8, delay: 200 }, { name: &#39;Orange&#39;, price: 8.2, delay: 400 } ]</p></details><h4 id="some" tabindex="-1"><a class="header-anchor" href="#some" aria-hidden="true">#</a> some</h4><ul><li>some(arr, iterator, callback)</li></ul><p>判断集合中是否有至少一个元素满足条件，如果是最终callback得到的值为true，否则为false.</p><details class="tip-block details"><summary>参数：</summary><ul><li>arr 一个数组</li><li>iterator(item, callback) 一个回调函数，循环到得每一项都会执行。</li><li><ul><li>callback(truthValue) 必须传递一个布尔值。</li></ul></li><li>callback(result) 回调函数 result为 true 或 false 取决于iterator 的运行结果。</li></ul></details><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;some&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><details class="tip-block details"><summary>控制台输出</summary><p>some null true</p></details><h4 id="somelimit" tabindex="-1"><a class="header-anchor" href="#somelimit" aria-hidden="true">#</a> someLimit</h4><ul><li>someLimit(arr, limit, iterator, callback)</li></ul><h4 id="someseries" tabindex="-1"><a class="header-anchor" href="#someseries" aria-hidden="true">#</a> someSeries</h4><ul><li>someSeries(arr, iterator, callback)</li></ul><h4 id="every" tabindex="-1"><a class="header-anchor" href="#every" aria-hidden="true">#</a> every</h4><ul><li>every(arr, iterator, callback)</li></ul><details class="tip-block details"><summary>参数：</summary><ul><li>arr 一个数组</li><li>iterator(item, callback) 一个回调函数，循环到得每一项都会执行。</li><li><ul><li>callback(truthValue) 必须传递一个布尔值。</li></ul></li><li>callback(result) 回调函数 result为 true 或 false 取决于iterator 的运行结果。</li></ul></details><p>如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;every&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><details class="tip-block details"><summary>控制台输出</summary><p>every null false</p></details><p>例子2：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;every&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><details class="tip-block details"><summary>控制台输出</summary><p>every null true</p></details><h4 id="everylimit" tabindex="-1"><a class="header-anchor" href="#everylimit" aria-hidden="true">#</a> everyLimit</h4><ul><li>everyLimit (arr, limit, iterator, callback)</li></ul><h4 id="everyseries" tabindex="-1"><a class="header-anchor" href="#everyseries" aria-hidden="true">#</a> everySeries</h4><ul><li>everySeries(arr, iterator, callback)</li></ul><h4 id="concat-合并" tabindex="-1"><a class="header-anchor" href="#concat-合并" aria-hidden="true">#</a> concat 合并</h4><ul><li>concat(arr, iterator, callback)</li></ul><p>将多个异步操作的结果并行合并为一个数组。合并之后的顺序是不固定的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;concat&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange concat null [ 13.6, 5, 16.4 ]</p></details><h4 id="concatlimit-合并" tabindex="-1"><a class="header-anchor" href="#concatlimit-合并" aria-hidden="true">#</a> concatLimit 合并</h4><ul><li>concatLimit(arr, limit, iterator, callback)</li></ul><p>将异步操作的结果，限制数量并行合并为一个数组。合并之后的顺序是不固定的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">concatLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;concatLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi end Apple start Orange end Litchi end Orange concatLimit null [ 13.6, 5, 16.4 ]</p></details><h4 id="concatseries-合并" tabindex="-1"><a class="header-anchor" href="#concatseries-合并" aria-hidden="true">#</a> concatSeries 合并</h4><ul><li>concatSeries(arr, iterator, callback)</li></ul><p>将多个异步操作的结果顺序合并为一个数组。合并之后的顺序是不固定的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">concatSeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;concatSeries&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange concatSeries null [ 13.6, 5, 16.4 ]</p></details><h4 id="groupby" tabindex="-1"><a class="header-anchor" href="#groupby" aria-hidden="true">#</a> groupBy</h4><ul><li>groupBy(arr, iterator, callback)</li></ul><p>传入一系列对象，并根据设置的 key 并发进行分组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">6.8</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Litchi&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span><span class="token string">&#39;B&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Orange&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span><span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\nasync<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;groupBy&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi start Orange end Apple end Litchi end Orange groupBy null { A: [ { name: &#39;Apple&#39;, price: 6.8, delay: 200, origin: &#39;A&#39; }, { name: &#39;Orange&#39;, price: 8.2, delay: 400, origin: &#39;A&#39; } ],B: [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300, origin: &#39;B&#39; } ] }</p></details><h4 id="groupbylimit" tabindex="-1"><a class="header-anchor" href="#groupbylimit" aria-hidden="true">#</a> groupByLimit</h4><ul><li>groupByLimit(arr, limit, iterator, callback)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">groupByLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;groupByLimit&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple start Litchi end Apple start Orange end Litchi end Orange groupByLimit null { A: [ { name: &#39;Apple&#39;, price: 6.8, delay: 200, origin: &#39;A&#39; }, { name: &#39;Orange&#39;, price: 8.2, delay: 400, origin: &#39;A&#39; } ], B: [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300, origin: &#39;B&#39; } ] }</p></details><h4 id="groupbyseries" tabindex="-1"><a class="header-anchor" href="#groupbyseries" aria-hidden="true">#</a> groupBySeries</h4><ul><li>groupBySeries(arr, iterator, callback)</li></ul><p>传入一系列对象，并根据设置的 key 顺序进行分组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">groupBySeries</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;groupBySeries&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="tip-block details"><summary>控制台输出</summary><p>start Apple end Apple start Litchi end Litchi start Orange end Orange groupBySeries null { A: [ { name: &#39;Apple&#39;, price: 6.8, delay: 200, origin: &#39;A&#39; },{ name: &#39;Orange&#39;, price: 8.2, delay: 400, origin: &#39;A&#39; } ],B: [ { name: &#39;Litchi&#39;, price: 2.5, delay: 300, origin: &#39;B&#39; } ] }</p></details><hr>', 238);
function _sfc_render(_ctx, _cache) {
  const _component_router_link = resolveComponent("router-link");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    _hoisted_2,
    createBaseVNode("details", _hoisted_3, [
      _hoisted_4,
      createBaseVNode("nav", _hoisted_5, [
        createBaseVNode("ul", null, [
          createBaseVNode("li", null, [
            createVNode(_component_router_link, { to: "#内容" }, {
              default: withCtx(() => [
                createTextVNode("内容")
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          createBaseVNode("li", null, [
            createVNode(_component_router_link, { to: "#安装" }, {
              default: withCtx(() => [
                createTextVNode("安装")
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          createBaseVNode("li", null, [
            createVNode(_component_router_link, { to: "#流程控制" }, {
              default: withCtx(() => [
                createTextVNode("流程控制")
              ]),
              _: 1
              /* STABLE */
            }),
            createBaseVNode("ul", null, [
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#series-串行执行" }, {
                  default: withCtx(() => [
                    createTextVNode("series 串行执行")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#waterfall-串行传参" }, {
                  default: withCtx(() => [
                    createTextVNode("waterfall 串行传参")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#parallel-并行执行" }, {
                  default: withCtx(() => [
                    createTextVNode("parallel 并行执行")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#whilst-循环" }, {
                  default: withCtx(() => [
                    createTextVNode("whilst 循环")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#dowhilst-循环" }, {
                  default: withCtx(() => [
                    createTextVNode("doWhilst 循环")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#until" }, {
                  default: withCtx(() => [
                    createTextVNode("until")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#dountil" }, {
                  default: withCtx(() => [
                    createTextVNode("doUntil")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#during" }, {
                  default: withCtx(() => [
                    createTextVNode("during")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#doduring" }, {
                  default: withCtx(() => [
                    createTextVNode("doDuring")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#auto" }, {
                  default: withCtx(() => [
                    createTextVNode("auto")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ]),
          createBaseVNode("li", null, [
            createVNode(_component_router_link, { to: "#collections集合" }, {
              default: withCtx(() => [
                createTextVNode("Collections集合")
              ]),
              _: 1
              /* STABLE */
            }),
            createBaseVNode("ul", null, [
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#each" }, {
                  default: withCtx(() => [
                    createTextVNode("each")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#eachlimit" }, {
                  default: withCtx(() => [
                    createTextVNode("eachLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#eachseries" }, {
                  default: withCtx(() => [
                    createTextVNode("eachSeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#map" }, {
                  default: withCtx(() => [
                    createTextVNode("map")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#maplimit" }, {
                  default: withCtx(() => [
                    createTextVNode("mapLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#mapseries" }, {
                  default: withCtx(() => [
                    createTextVNode("mapSeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ]),
          createBaseVNode("li", null, [
            createVNode(_component_router_link, { to: "#mapvalues" }, {
              default: withCtx(() => [
                createTextVNode("mapValues")
              ]),
              _: 1
              /* STABLE */
            }),
            createBaseVNode("ul", null, [
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#mapvalueslimit" }, {
                  default: withCtx(() => [
                    createTextVNode("mapValuesLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#mapvaluesseries" }, {
                  default: withCtx(() => [
                    createTextVNode("mapValuesSeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#filter-条件过滤" }, {
                  default: withCtx(() => [
                    createTextVNode("filter 条件过滤")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#filterlimit条件过滤" }, {
                  default: withCtx(() => [
                    createTextVNode("filterLimit条件过滤")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#filterseries-条件过滤" }, {
                  default: withCtx(() => [
                    createTextVNode("filterSeries 条件过滤")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#reject-过滤例外" }, {
                  default: withCtx(() => [
                    createTextVNode("reject 过滤例外")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#rejectlimit" }, {
                  default: withCtx(() => [
                    createTextVNode("rejectLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#rejectseries" }, {
                  default: withCtx(() => [
                    createTextVNode("rejectSeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#reduce-串行累加" }, {
                  default: withCtx(() => [
                    createTextVNode("reduce 串行累加")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#reduceright-元素计算" }, {
                  default: withCtx(() => [
                    createTextVNode("reduceRight 元素计算")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#detect" }, {
                  default: withCtx(() => [
                    createTextVNode("detect")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#detectlimit" }, {
                  default: withCtx(() => [
                    createTextVNode("detectLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#detectseries" }, {
                  default: withCtx(() => [
                    createTextVNode("detectSeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#sortby-排序" }, {
                  default: withCtx(() => [
                    createTextVNode("sortBy 排序")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#some" }, {
                  default: withCtx(() => [
                    createTextVNode("some")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#somelimit" }, {
                  default: withCtx(() => [
                    createTextVNode("someLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#someseries" }, {
                  default: withCtx(() => [
                    createTextVNode("someSeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#every" }, {
                  default: withCtx(() => [
                    createTextVNode("every")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#everylimit" }, {
                  default: withCtx(() => [
                    createTextVNode("everyLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#everyseries" }, {
                  default: withCtx(() => [
                    createTextVNode("everySeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#concat-合并" }, {
                  default: withCtx(() => [
                    createTextVNode("concat 合并")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#concatlimit-合并" }, {
                  default: withCtx(() => [
                    createTextVNode("concatLimit 合并")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#concatseries-合并" }, {
                  default: withCtx(() => [
                    createTextVNode("concatSeries 合并")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#groupby" }, {
                  default: withCtx(() => [
                    createTextVNode("groupBy")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#groupbylimit" }, {
                  default: withCtx(() => [
                    createTextVNode("groupByLimit")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              createBaseVNode("li", null, [
                createVNode(_component_router_link, { to: "#groupbyseries" }, {
                  default: withCtx(() => [
                    createTextVNode("groupBySeries")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ])
        ])
      ])
    ]),
    _hoisted_6
  ]);
}
const async_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "async.html.vue"]]);
export {
  async_html as default
};
