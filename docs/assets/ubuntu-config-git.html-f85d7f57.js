import { o as openBlock, a as createElementBlock, j as createStaticVNode } from "./app-5c6fb363.js";
import { _ as _export_sfc } from "./framework-cc2b3d55.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="ubuntu-配置-git" tabindex="-1"><a class="header-anchor" href="#ubuntu-配置-git" aria-hidden="true">#</a> Ubuntu 配置 git</h1><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><p>更新分支树</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote update origin <span class="token parameter variable">--prune</span>\n</code></pre></div><p>查看远程分支</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-a</span>\n</code></pre></div><p>查看本地分支</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch\n</code></pre></div><p>创建分支</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch develop\n</code></pre></div><p>推送本地分支到远程</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin develop\n</code></pre></div><p>切换分支</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout develop\n</code></pre></div><p>删除本地分支</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch –D develop\n</code></pre></div><p>删除远程分支：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-r</span> <span class="token parameter variable">-d</span> origin/branch-name\n<span class="token function">git</span> push origin :branch-name\n</code></pre></div><p>或者</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch –r –D origin/develop\n<span class="token function">git</span> push <span class="token parameter variable">--delete</span> origin develop\n</code></pre></div><h2 id="重命名分支" tabindex="-1"><a class="header-anchor" href="#重命名分支" aria-hidden="true">#</a> 重命名分支</h2><p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。 例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-m</span> devel develop\n<span class="token function">git</span> push origin develop\n</code></pre></div><h2 id="配置ssh" tabindex="-1"><a class="header-anchor" href="#配置ssh" aria-hidden="true">#</a> 配置SSH</h2><p>1.取消git全局配置</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name\n<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email\n</code></pre></div><p>2.查看配置</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>\n</code></pre></div><p>3.本地配置私钥</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.ssh\nssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;邮箱地址&quot;</span>  	<span class="token comment">#之后会提示输入文件名，默认id_rsa</span>\n</code></pre></div><p>4.添加ssh key</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>ssh-add <span class="token parameter variable">-K</span> ~/.ssh/id_rsa\n</code></pre></div><p>::: info 查看配置: <code>ssh-add -l</code> 删除配置：<code>ssh-add -D</code> :::</p><p>5.设置config文件</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.ssh/\n<span class="token function">vim</span> config\n</code></pre></div><p>内容格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># github\nHost github\nHostName github.com\nPreferredAuthentications publickey\nUser git\nIdentityFile ~/.ssh/id_rsa_github\n\n# gitee\nHost gitee\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa_gitee\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: info <code>Host</code> 别名（方便记忆） <code>HostName</code> IP地址或者域名（可以写假域名，但要在host文件中绑定ip地址） <code>IdentityFile</code> 对应的私钥,也就是不带.pub 后缀的 <code>User</code> 用户名，有的是邮箱,一般默认情况 git 就可以 <code>Port</code> 默认是22可以不写 ::: 6.验证</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com\n<span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com\n</code></pre></div>', 39);
const _hoisted_40 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_40);
}
const ubuntuConfigGit_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "ubuntu-config-git.html.vue"]]);
export {
  ubuntuConfigGit_html as default
};
