import { r as resolveComponent, o as openBlock, a as createElementBlock, b as createBaseVNode, e as createTextVNode, f as createVNode, j as createStaticVNode } from "./app-c3a13116.js";
import { _ as _export_sfc } from "./framework-cc2b3d55.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="lodash-字符串处理-string" tabindex="-1"><a class="header-anchor" href="#lodash-字符串处理-string" aria-hidden="true">#</a> Lodash 字符串处理 String</h1><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h2><h3 id="tolower-string" tabindex="-1"><a class="header-anchor" href="#tolower-string" aria-hidden="true">#</a> _.toLower([string=&#39;&#39;])</h3>', 3);
const _hoisted_4 = {
  href: "https://mdn.io/toLowerCase",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_5 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">toLower</span><span class="token punctuation">(</span><span class="token string">&#39;--Foo-Bar--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;--foo-bar--&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">toLower</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foobar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">toLower</span><span class="token punctuation">(</span><span class="token string">&#39;__FOO_BAR__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;__foo_bar__&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toupper-string" tabindex="-1"><a class="header-anchor" href="#toupper-string" aria-hidden="true">#</a> _.toUpper([string=&#39;&#39;])</h3>', 2);
const _hoisted_7 = {
  href: "https://mdn.io/toUpperCase",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_8 = /* @__PURE__ */ createStaticVNode('<h3 id="lowercase-string" tabindex="-1"><a class="header-anchor" href="#lowercase-string" aria-hidden="true">#</a> _.lowerCase([string=&#39;&#39;])</h3><p>转换字符串string以空格分开单词，并转换为小写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">lowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;--Foo-Bar--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">lowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">lowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;__FOO_BAR__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo bar&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lowerfirst-string" tabindex="-1"><a class="header-anchor" href="#lowerfirst-string" aria-hidden="true">#</a> _.lowerFirst([string=&#39;&#39;])</h3><p>转换字符串string的首字母为小写, 其余不变。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">lowerFirst</span><span class="token punctuation">(</span><span class="token string">&#39;Fred&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fred&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">lowerFirst</span><span class="token punctuation">(</span><span class="token string">&#39;FRED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fRED&#39;</span>\n</code></pre></div><h3 id="uppercase-string" tabindex="-1"><a class="header-anchor" href="#uppercase-string" aria-hidden="true">#</a> _.upperCase([string=&#39;&#39;])</h3><p>转换字符串string为 空格 分隔的大写单词。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">upperCase</span><span class="token punctuation">(</span><span class="token string">&#39;--foo-bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;FOO BAR&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">upperCase</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;FOO BAR&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">upperCase</span><span class="token punctuation">(</span><span class="token string">&#39;__foo_bar__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;FOO BAR&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="upperfirst-string" tabindex="-1"><a class="header-anchor" href="#upperfirst-string" aria-hidden="true">#</a> _.upperFirst([string=&#39;&#39;])</h3><p>转换字符串string的首字母为大写，其余不变。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">upperFirst</span><span class="token punctuation">(</span><span class="token string">&#39;fred&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;Fred&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">upperFirst</span><span class="token punctuation">(</span><span class="token string">&#39;FRED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;FRED&#39;</span>\n</code></pre></div><h3 id="capitalize-string" tabindex="-1"><a class="header-anchor" href="#capitalize-string" aria-hidden="true">#</a> _.capitalize([string=&#39;&#39;])</h3><p>字符串首字符大写，其余小写</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;FRED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;Fred&#39;</span>\n</code></pre></div><h3 id="camelcase-string" tabindex="-1"><a class="header-anchor" href="#camelcase-string" aria-hidden="true">#</a> _.camelCase([string=&#39;&#39;])</h3><p>转换字符串string为驼峰写法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">&#39;Foo Bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fooBar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">&#39;--foo-bar--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fooBar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">&#39;__FOO_BAR__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fooBar&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kebabcase-string" tabindex="-1"><a class="header-anchor" href="#kebabcase-string" aria-hidden="true">#</a> _.kebabCase([string=&#39;&#39;])</h3>', 19);
const _hoisted_27 = {
  href: "https://en.wikipedia.org/wiki/Letter_case#Special_case_styles",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_28 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">kebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;Foo Bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo-bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">kebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo-bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">kebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;__FOO_BAR__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo-bar&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="snakecase-string" tabindex="-1"><a class="header-anchor" href="#snakecase-string" aria-hidden="true">#</a> _.snakeCase([string=&#39;&#39;])</h3>', 2);
const _hoisted_30 = {
  href: "https://en.wikipedia.org/wiki/Snake_case",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_31 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">snakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;Foo Bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo_bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">snakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo_bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">snakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;--FOO-BAR--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;foo_bar&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="startcase-string" tabindex="-1"><a class="header-anchor" href="#startcase-string" aria-hidden="true">#</a> _.startCase([string=&#39;&#39;])</h3>', 2);
const _hoisted_33 = {
  href: "https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_34 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">startCase</span><span class="token punctuation">(</span><span class="token string">&#39;--foo-bar--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;Foo Bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">startCase</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;Foo Bar&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">startCase</span><span class="token punctuation">(</span><span class="token string">&#39;__FOO_BAR__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;FOO BAR&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转义" tabindex="-1"><a class="header-anchor" href="#转义" aria-hidden="true">#</a> 转义</h2><h3 id="escape-string" tabindex="-1"><a class="header-anchor" href="#escape-string" aria-hidden="true">#</a> _.escape([string=&#39;&#39;])</h3><p>转义string中的 &quot;&amp;&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &#39;&quot;&#39;, &quot;&#39;&quot;, 和 &quot;`&quot; 字符为HTML实体字符。</p><div class="tip-block warning"><p class="title">注意：</p><p>不会转义其他字符。如果需要，可以使用第三方库，例如he。</p></div><p>虽然 &quot;&gt;&quot; 是对称转义的，字符如 &quot;&gt;&quot; 和 &quot;/&quot; 没有特殊的意义，所以不需要在 HTML 转义。 除非它们是标签的一部分，或者是不带引号的属性值。</p>', 6);
const _hoisted_40 = {
  href: "http://wonko.com/post/html-escaping",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_41 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">&#39;fred, barney, &amp; pebbles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fred, barney, &amp; pebbles&#39;</span>\n</code></pre></div><h3 id="escaperegexp-string" tabindex="-1"><a class="header-anchor" href="#escaperegexp-string" aria-hidden="true">#</a> _.escapeRegExp([string=&#39;&#39;])</h3><p>转义 RegExp 字符串中特殊的字符 &quot;^&quot;, &quot;$&quot;, &quot;&quot;, &quot;.&quot;, &quot;*&quot;, &quot;+&quot;, &quot;?&quot;, &quot;(&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot;, &quot;, &quot;, 和 &quot;|&quot; in .</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">escapeRegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[lodash](https://lodash.com/)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;\\[lodash\\]\\(https://lodash\\.com/\\)&#39;</span>\n</code></pre></div><h3 id="unescape-string" tabindex="-1"><a class="header-anchor" href="#unescape-string" aria-hidden="true">#</a> _.unescape([string=&#39;&#39;])</h3><p><code>_.escape</code>的反向版。 这个方法转换string字符串中的 HTML 实体 &amp;, &lt;, &gt;, &quot;, &#39;, 和 ` 为对应的字符。</p><div class="tip-block warning"><p class="title">注意：</p><p>不会转义其他字符。如果需要，可以使用第三方库，例如he。</p></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">unescape</span><span class="token punctuation">(</span><span class="token string">&#39;fred, barney, &amp; pebbles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;fred, barney, &amp; pebbles&#39;</span>\n</code></pre></div><h2 id="分割" tabindex="-1"><a class="header-anchor" href="#分割" aria-hidden="true">#</a> 分割</h2><h3 id="split-string-separator-limit" tabindex="-1"><a class="header-anchor" href="#split-string-separator-limit" aria-hidden="true">#</a> _.split([string=&#39;&#39;], separator, [limit])</h3><p>根据<code>separator</code>拆分字符串<code>string</code>。</p>', 11);
const _hoisted_52 = { class: "tip-block warning" };
const _hoisted_53 = /* @__PURE__ */ createBaseVNode(
  "p",
  { class: "title" },
  "注意：",
  -1
  /* HOISTED */
);
const _hoisted_54 = {
  href: "https://mdn.io/String/split",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_55 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;a-b-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre></div><h3 id="words-string-pattern" tabindex="-1"><a class="header-anchor" href="#words-string-pattern" aria-hidden="true">#</a> _.words([string=&#39;&#39;], [pattern])</h3><p>拆分字符串string中的词为数组 。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">words</span><span class="token punctuation">(</span><span class="token string">&#39;fred, barney, &amp; pebbles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [&#39;fred&#39;, &#39;barney&#39;, &#39;pebbles&#39;]</span>\n \n_<span class="token punctuation">.</span><span class="token function">words</span><span class="token punctuation">(</span><span class="token string">&#39;fred, barney, &amp; pebbles&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^, ]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [&#39;fred&#39;, &#39;barney&#39;, &#39;&amp;&#39;, &#39;pebbles&#39;]</span>\n</code></pre></div><h2 id="检索" tabindex="-1"><a class="header-anchor" href="#检索" aria-hidden="true">#</a> 检索</h2><h3 id="startswith-string-target-position-0" tabindex="-1"><a class="header-anchor" href="#startswith-string-target-position-0" aria-hidden="true">#</a> _.startsWith([string=&#39;&#39;], [target], [position=0])</h3><p>检查字符串string是否以<code>target</code>开头。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n \n_<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; false</span>\n \n_<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="endswith-string-target-position-string-length" tabindex="-1"><a class="header-anchor" href="#endswith-string-target-position-string-length" aria-hidden="true">#</a> _.endsWith([string=&#39;&#39;], [target], [position=string.length])</h3><p>检查字符串string是否以给定的target字符串结尾;如果字符串string以target字符串结尾，那么返回 true，否则返回 false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n \n_<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; false</span>\n \n_<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h2><h3 id="replace-string-pattern-replacement" tabindex="-1"><a class="header-anchor" href="#replace-string-pattern-replacement" aria-hidden="true">#</a> _.replace([string=&#39;&#39;], pattern, replacement)</h3><p>替换string字符串中匹配的<code>pattern</code>为给定的<code>replacement</code></p>', 14);
const _hoisted_69 = { class: "tip-block warning" };
const _hoisted_70 = /* @__PURE__ */ createBaseVNode(
  "p",
  { class: "title" },
  "注意：",
  -1
  /* HOISTED */
);
const _hoisted_71 = {
  href: "https://mdn.io/String/replace",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_72 = /* @__PURE__ */ createStaticVNode('<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;Hi Fred&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Fred&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Barney&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;Hi Barney&#39;</span>\n</code></pre></div><h3 id="trim-string-chars-whitespace" tabindex="-1"><a class="header-anchor" href="#trim-string-chars-whitespace" aria-hidden="true">#</a> _.trim([string=&#39;&#39;], [chars=whitespace])</h3><p>从string字符串中移除前面和后面的 空格 或 指定的字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">&#39;  abc  &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">&#39;-_-abc-_-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;  foo  &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;  bar  &#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [&#39;foo&#39;, &#39;bar&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trimstart-string-chars-whitespace" tabindex="-1"><a class="header-anchor" href="#trimstart-string-chars-whitespace" aria-hidden="true">#</a> _.trimStart([string=&#39;&#39;], [chars=whitespace])</h3><p>从string字符串中移除前面的 空格 或 指定的字符。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token string">&#39;  abc  &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc  &#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token string">&#39;-_-abc-_-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc-_-&#39;</span>\n</code></pre></div><h3 id="trimend-string-chars-whitespace" tabindex="-1"><a class="header-anchor" href="#trimend-string-chars-whitespace" aria-hidden="true">#</a> _.trimEnd([string=&#39;&#39;], [chars=whitespace])</h3><p>从string字符串中移除后面的 空格 或 指定的字符。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token string">&#39;  abc  &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;  abc&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token string">&#39;-_-abc-_-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;-_-abc&#39;</span>\n</code></pre></div><h3 id="pad-string-length-0-chars" tabindex="-1"><a class="header-anchor" href="#pad-string-length-0-chars" aria-hidden="true">#</a> _.pad([string=&#39;&#39;], [length=0], [chars=&#39; &#39;])</h3><p>如果string字符串长度小于 length 则从左侧和右侧填充字符。 如果没法平均分配，则截断超出的长度。</p><details class="tip-block details"><summary>参数：</summary><ul><li>[string=&#39;&#39;] (string): 要填充的字符串。</li><li>[length=0] (number): 填充的长度。</li><li>[chars=&#39; &#39;] (string): 填充字符。</li></ul></details><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">pad</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;  abc   &#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">pad</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;_-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;_-abc_-_&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">pad</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="padstart-string-length-0-chars" tabindex="-1"><a class="header-anchor" href="#padstart-string-length-0-chars" aria-hidden="true">#</a> _.padStart([string=&#39;&#39;], [length=0], [chars=&#39; &#39;])</h3><p>如果string字符串长度小于 length 则在左侧填充字符。 如果超出length长度则截断超出的部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;   abc&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;_-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;_-_abc&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="padend-string-length-0-chars" tabindex="-1"><a class="header-anchor" href="#padend-string-length-0-chars" aria-hidden="true">#</a> _.padEnd([string=&#39;&#39;], [length=0], [chars=&#39; &#39;])</h3><p>如果string字符串长度小于 length 则在右侧填充字符。 如果超出length长度则截断超出的部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc   &#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;_-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc_-_&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abc&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><h3 id="parseint-string-radix-10" tabindex="-1"><a class="header-anchor" href="#parseint-string-radix-10" aria-hidden="true">#</a> _.parseInt(string, [radix=10])</h3><p>转换string字符串为指定基数的整数。 如果基数是 <code>undefined</code> 或者 <code>0</code>，则<code>radix</code>基数默认是10，如果<code>string</code>字符串是16进制，则<code>radix</code>基数为 16。</p><div class="tip-block warning"><p class="title">注意：</p><p>注意: 这个方法与ES5 implementation 的 parseInt是一样的。</p></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;08&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; 8</span>\n \n_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;08&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [6, 8, 10]</span>\n</code></pre></div><h3 id="repeat-string-n-1" tabindex="-1"><a class="header-anchor" href="#repeat-string-n-1" aria-hidden="true">#</a> _.repeat([string=&#39;&#39;], [n=1])</h3><p>重复 N 次给定字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;***&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;abcabc&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="truncate-string-options" tabindex="-1"><a class="header-anchor" href="#truncate-string-options" aria-hidden="true">#</a> _.truncate([string=&#39;&#39;], [options=])</h3><p>截断string字符串，如果字符串超出了限定的最大值。 被截断的字符串后面会以<code>omission</code>代替，<code>omission</code>默认是 &quot;...&quot;。</p><details class="tip-block details"><summary>参数</summary><p>[string=&#39;&#39;] (string): 要截断的字符串。 [options=] (Object): 选项对象。 [options.length=30] (number): 允许的最大长度。 [options.omission=&#39;...&#39;] (string): 超出后的代替字符。 [options.separator] (RegExp|string): 截断点。</p></details><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&#39;hi-diddly-ho there, neighborino&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hi-diddly-ho there, neighbo...&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&#39;hi-diddly-ho there, neighborino&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&#39;length&#39;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;separator&#39;</span><span class="token operator">:</span> <span class="token string">&#39; &#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hi-diddly-ho there,...&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&#39;hi-diddly-ho there, neighborino&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&#39;length&#39;</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;separator&#39;</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,? +</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hi-diddly-ho there...&#39;</span>\n \n_<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&#39;hi-diddly-ho there, neighborino&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&#39;omission&#39;</span><span class="token operator">:</span> <span class="token string">&#39; [...]&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hi-diddly-ho there, neig [...]&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="template-string-options" tabindex="-1"><a class="header-anchor" href="#template-string-options" aria-hidden="true">#</a> _.template([string=&#39;&#39;], [options=])</h3>', 33);
const _hoisted_105 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  '"interpolate"',
  -1
  /* HOISTED */
);
const _hoisted_106 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  '"escape"',
  -1
  /* HOISTED */
);
const _hoisted_107 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  '"evaluate"',
  -1
  /* HOISTED */
);
const _hoisted_108 = {
  href: "https://www.lodashjs.com/docs/lodash.template#templateSettings",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_109 = { class: "tip-block warning" };
const _hoisted_110 = /* @__PURE__ */ createBaseVNode(
  "p",
  { class: "title" },
  "注意：",
  -1
  /* HOISTED */
);
const _hoisted_111 = {
  href: "https://www.lodashjs.com/docs/lodash.template#template",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_112 = {
  href: "http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_113 = {
  href: "https://lodash.com/custom-builds",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_114 = {
  href: "https://developer.chrome.com/extensions/sandboxingEval",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_115 = /* @__PURE__ */ createStaticVNode('<details class="tip-block details"><summary>参数：</summary><ul><li>[string=&#39;&#39;] (string): 模板字符串.</li><li>[options=] (Object): 选项对象.</li><li>[options.escape=_.templateSettings.escape] (RegExp): &quot;escape&quot; 分隔符.</li><li>[options.evaluate=_.templateSettings.evaluate] (RegExp): &quot;evaluate&quot; 分隔符.</li><li>[options.imports=_.templateSettings.imports] (Object): 导入对象到模板中作为自由变量。</li><li>[options.interpolate=_.templateSettings.interpolate] (RegExp): &quot;interpolate&quot; 分隔符。</li><li>[options.sourceURL=&#39;lodash.templateSources[n]&#39;] (string): 模板编译的来源URL。</li><li>[options.variable=&#39;obj&#39;] (string): 数据对象的变量名。</li></ul></details><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 &quot;interpolate&quot; 分隔符创建编译模板</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;hello &lt;%= user %&gt;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> <span class="token string">&#39;fred&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hello fred!&#39;</span>\n \n<span class="token comment">// 使用 HTML &quot;escape&quot; 转义数据的值</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;&lt;%- value %&gt;&lt;/b&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;script&gt;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;&lt;b&gt;&lt;script&gt;&lt;/b&gt;&#39;</span>\n \n<span class="token comment">// 使用 &quot;evaluate&quot; 分隔符执行 JavaScript 和 生成HTML代码</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;% _.forEach(users, function(user) { %&gt;&lt;li&gt;&lt;%- user %&gt;&lt;/li&gt;&lt;% }); %&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;users&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;fred&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;barney&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;&lt;li&gt;fred&lt;/li&gt;&lt;li&gt;barney&lt;/li&gt;&#39;</span>\n \n<span class="token comment">// 在 &quot;evaluate&quot; 分隔符中使用内部的 `print` 函数</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;% print(&quot;hello &quot; + user); %&gt;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> <span class="token string">&#39;barney&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hello barney!&#39;</span>\n \n<span class="token comment">// 使用 ES 分隔符代替默认的 &quot;interpolate&quot; 分隔符</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;hello ${ user }!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pebbles&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hello pebbles!&#39;</span>\n \n<span class="token comment">// 使用自定义的模板分隔符</span>\n_<span class="token punctuation">.</span>templateSettings<span class="token punctuation">.</span>interpolate <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{ {([\\s\\S]+?)} }</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;hello {{ user }}!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> <span class="token string">&#39;mustache&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;hello mustache!&#39;</span>\n \n<span class="token comment">// 使用反斜杠符号作为纯文本处理</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;%= &quot;\\\\&lt;%- value %\\\\&gt;&quot; %&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;ignored&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;&lt;%- value %&gt;&#39;</span>\n \n<span class="token comment">// 使用 `imports` 选项导入 `jq` 作为 `jQuery` 的别名</span>\n<span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&#39;&lt;% jq.each(users, function(user) { %&gt;&lt;li&gt;&lt;%- user %&gt;&lt;/li&gt;&lt;% }); %&gt;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;imports&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;jq&#39;</span><span class="token operator">:</span> jQuery <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;users&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;fred&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;barney&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; &#39;&lt;li&gt;fred&lt;/li&gt;&lt;li&gt;barney&lt;/li&gt;&#39;</span>\n \n<span class="token comment">// 使用 `sourceURL` 选项指定模板的来源URL</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;hello &lt;%= user %&gt;!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;sourceURL&#39;</span><span class="token operator">:</span> <span class="token string">&#39;/basic/greeting.jst&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">compiled</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; 在开发工具的 Sources 选项卡 或 Resources 面板中找到 &quot;greeting.jst&quot;</span>\n \n<span class="token comment">// 使用 `variable` 选项确保在编译模板中不声明变量</span>\n<span class="token keyword">var</span> compiled <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;hi &lt;%= data.user %&gt;!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;variable&#39;</span><span class="token operator">:</span> <span class="token string">&#39;data&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncompiled<span class="token punctuation">.</span>source<span class="token punctuation">;</span>\n<span class="token comment">// =&gt; function(data) {</span>\n<span class="token comment">//   var __t, __p = &#39;&#39;;</span>\n<span class="token comment">//   __p += &#39;hi &#39; + ((__t = ( data.user )) == null ? &#39;&#39; : __t) + &#39;!&#39;;</span>\n<span class="token comment">//   return __p;</span>\n<span class="token comment">// }</span>\n \n<span class="token comment">// 使用 `source` 特性内联编译模板</span>\n<span class="token comment">// 便以查看行号、错误信息、堆栈</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> <span class="token string">&#39;jst.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;\\\n  var JST = {\\\n    &quot;main&quot;: &#39;</span> <span class="token operator">+</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>mainText<span class="token punctuation">)</span><span class="token punctuation">.</span>source <span class="token operator">+</span> <span class="token string">&#39;\\\n  };\\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>', 3);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("转换整个string字符串的字符为小写，类似"),
      createBaseVNode("a", _hoisted_4, [
        createTextVNode("String#toLowerCase"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("。")
    ]),
    _hoisted_5,
    createBaseVNode("p", null, [
      createTextVNode("转换整个string字符串的字符为大写，类似"),
      createBaseVNode("a", _hoisted_7, [
        createTextVNode("String#toUpperCase"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("。")
    ]),
    _hoisted_8,
    createBaseVNode("p", null, [
      createTextVNode("转换字符串string为"),
      createBaseVNode("a", _hoisted_27, [
        createTextVNode("kebab case"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(".")
    ]),
    _hoisted_28,
    createBaseVNode("p", null, [
      createTextVNode("转换字符串string为"),
      createBaseVNode("a", _hoisted_30, [
        createTextVNode("snake case"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("。")
    ]),
    _hoisted_31,
    createBaseVNode("p", null, [
      createTextVNode("转换string字符串为"),
      createBaseVNode("a", _hoisted_33, [
        createTextVNode("start case"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("。")
    ]),
    _hoisted_34,
    createBaseVNode("p", null, [
      createTextVNode("当解析 HTML 时，总应该在"),
      createBaseVNode("a", _hoisted_40, [
        createTextVNode("属性值上使用引号"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode(" 以减少 XSS 的可能性。")
    ]),
    _hoisted_41,
    createBaseVNode("div", _hoisted_52, [
      _hoisted_53,
      createBaseVNode("p", null, [
        createTextVNode("这个方法基于"),
        createBaseVNode("a", _hoisted_54, [
          createTextVNode("String#split"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("。")
      ])
    ]),
    _hoisted_55,
    createBaseVNode("div", _hoisted_69, [
      _hoisted_70,
      createBaseVNode("p", null, [
        createTextVNode("这个方法基于"),
        createBaseVNode("a", _hoisted_71, [
          createTextVNode("String#replace"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode(".")
      ])
    ]),
    _hoisted_72,
    createBaseVNode("p", null, [
      createTextVNode("创建一个预编译模板方法，可以插入数据到模板中"),
      _hoisted_105,
      createTextVNode("分隔符相应的位置。 HTML会在"),
      _hoisted_106,
      createTextVNode("分隔符中转换为相应实体。 在"),
      _hoisted_107,
      createTextVNode("分隔符中允许执行JavaScript代码。 在模板中可以自由访问变量。 如果设置了选项对象，则会优先覆盖"),
      createBaseVNode("a", _hoisted_108, [
        createTextVNode("_.templateSettings"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("的值。")
    ]),
    createBaseVNode("div", _hoisted_109, [
      _hoisted_110,
      createBaseVNode("p", null, [
        createTextVNode("在开发过程中，构建"),
        createBaseVNode("a", _hoisted_111, [
          createTextVNode("_.template"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("可以使用"),
        createBaseVNode("a", _hoisted_112, [
          createTextVNode("sourceURLs"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("， 便于调试。 了解更多预编译模板的信息查看"),
        createBaseVNode("a", _hoisted_113, [
          createTextVNode("lodash的自定义构建文档"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("。 了解更多 Chrome 沙箱扩展的信息查看"),
        createBaseVNode("a", _hoisted_114, [
          createTextVNode("Chrome的扩展文档"),
          createVNode(_component_ExternalLinkIcon)
        ]),
        createTextVNode("。")
      ])
    ]),
    _hoisted_115
  ]);
}
const lodashString_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "lodash-string.html.vue"]]);
export {
  lodashString_html as default
};
